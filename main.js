/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => UrlInternalViewerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  openInBrowser: false
};
var VIEW_TYPE_WEB = "url-webview";
var UrlInternalViewerPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerView(VIEW_TYPE_WEB, (leaf) => new UrlWebView(leaf, this.settings));
    this.registerExtensions(["url"], VIEW_TYPE_WEB);
    this.addSettingTab(new UrlViewerSettingTab(this.app, this));
  }
  onunload() {
    this.app.workspace.detachLeavesOfType(VIEW_TYPE_WEB);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var UrlWebView = class extends import_obsidian.FileView {
  constructor(leaf, settings) {
    super(leaf);
    this.isEditing = false;
    this.settings = settings;
  }
  extractUrl(content) {
    let url = content.trim();
    if (content.includes("[InternetShortcut]")) {
      const match = content.match(/URL=(.+)/);
      if (match) url = match[1].trim();
    }
    return url;
  }
  getViewType() {
    return VIEW_TYPE_WEB;
  }
  getDisplayText() {
    var _a;
    return ((_a = this.file) == null ? void 0 : _a.basename) || "URL Viewer";
  }
  async onOpen() {
    this.containerEl.addClass("url-viewer-container");
    this.addAction("edit", "Edit URL", () => this.toggleEditMode());
    this.addAction("external-link", "Open in browser", () => this.openInBrowser());
  }
  async onLoadFile(file) {
    const content = await this.app.vault.read(file);
    if (this.settings.openInBrowser) {
      const url = this.extractUrl(content);
      window.open(url, "_blank");
      return;
    }
    if (this.isEditing) {
      this.showEditMode(file, content);
    } else {
      const url = this.extractUrl(content);
      this.showViewMode(url);
    }
  }
  showViewMode(url) {
    const container = this.containerEl.children[1];
    container.empty();
    const iframe = container.createEl("iframe");
    iframe.src = url;
    iframe.style.width = "100%";
    iframe.style.height = "100%";
    iframe.style.border = "none";
    iframe.style.margin = "0";
    iframe.style.padding = "0";
    iframe.style.overflow = "hidden";
    iframe.setAttribute("sandbox", "allow-same-origin allow-scripts allow-forms allow-popups");
    iframe.setAttribute("scrolling", "yes");
  }
  showEditMode(file, content) {
    const container = this.containerEl.children[1];
    container.empty();
    const editContainer = container.createDiv("url-edit-container");
    const textarea = editContainer.createEl("textarea", { cls: "url-textarea" });
    textarea.value = content;
    const btnContainer = editContainer.createDiv("url-edit-buttons");
    const saveBtn = btnContainer.createEl("button", { text: "Save", cls: "url-btn" });
    saveBtn.onclick = async () => {
      await this.app.vault.modify(file, textarea.value);
      this.isEditing = false;
      await this.onLoadFile(file);
    };
    const cancelBtn = btnContainer.createEl("button", { text: "Cancel", cls: "url-btn" });
    cancelBtn.onclick = () => {
      this.isEditing = false;
      this.onLoadFile(file);
    };
  }
  toggleEditMode() {
    this.isEditing = !this.isEditing;
    if (this.file) this.onLoadFile(this.file);
  }
  async openInBrowser() {
    if (this.file) {
      const content = await this.app.vault.read(this.file);
      const url = this.extractUrl(content);
      window.open(url, "_blank");
    }
  }
};
var UrlViewerSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "URL Viewer Settings" });
    new import_obsidian.Setting(containerEl).setName("Open in browser by default").setDesc("Open URL files directly in browser instead of webview").addToggle((toggle) => toggle.setValue(this.plugin.settings.openInBrowser).onChange(async (value) => {
      this.plugin.settings.openInBrowser = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
